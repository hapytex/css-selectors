-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parsing, rendering and manipulating css selectors in Haskell.
--   
--   A library for parsing, manipulating, and rendering css selectors (not
--   css files, just the selectors).
--   
--   It has a <i>quasiquoter</i> to enable Haskell to validate the css
--   selector at compile time.
--   
--   Currently the css grammar is implemented <i>without</i> the
--   pseudo-classes, pseudo-elements and negations. One can furthermore
--   calculate the specificity of a css-selector, and thus perform an
--   analysis over what css-selector will take precedence.
@package css-selectors
@version 0.5.0.0


-- | A module to encode and decode css selector strings. These are used in
--   the parser and renderer to parse and render css selector strings.
module Css3.Selector.Utils

-- | Parse a given css identifier to the content of the identifier.
readIdentifier :: String -> String

-- | Encode a given identifier to its css selector equivalent by escaping
--   certain characters.
encodeIdentifier :: Text -> Text

-- | Check if the given identifier is a valid css selector identifier.
isValidIdentifier :: String -> Bool

-- | Convert the given string to a given object by first checking if it is
--   a valid identifier, and if not raising an error. If it is a valid
--   identifier, the string is packed, and wrapped in the given function.
toIdentifier :: (Text -> a) -> String -> a

-- | Parses a css string literal to a string that ontains the content of
--   that string literal.
readCssString :: String -> String

-- | Convert a string to a css selector string literal. This is done by
--   putting quotes around the content, and escaping certain characters.
encodeString :: Char -> String -> String

-- | Convert a string to a css selector string literal. This is done by
--   putting quotes around the content, and escaping certain characters.
encodeText :: Char -> Text -> Text


-- | A module that defines the tree of types to represent and manipulate a
--   css selector. These data types are members of several typeclasses to
--   make these more useful.
module Css3.Selector.Core

-- | A class that defines that the given type can be converted to a css
--   selector value, and has a certain specificity.
class ToCssSelector a

-- | Convert the given element to a <a>Text</a> object that contains the
--   css selector.
toCssSelector :: ToCssSelector a => a -> Text

-- | Lift the given <a>ToCssSelector</a> type object to a
--   <a>SelectorGroup</a>, which is the "root type" of the css selector
--   hierarchy.
toSelectorGroup :: ToCssSelector a => a -> SelectorGroup

-- | Calculate the specificity of the css selector by returing a
--   <a>SelectorSpecificity</a> object.
specificity' :: ToCssSelector a => a -> SelectorSpecificity
toPattern :: ToCssSelector a => a -> Pat
normalize :: ToCssSelector a => a -> a

-- | The type of a single selector. This is a sequence of
--   <a>SelectorSequence</a>s that are combined with a
--   <a>SelectorCombinator</a>.
data Selector

-- | Convert a given <a>SelectorSequence</a> to a <a>Selector</a>.
Selector :: PseudoSelectorSequence -> Selector

-- | Create a combined selector where we have a <a>SelectorSequence</a>
--   that is combined with a given <a>SelectorCombinator</a> to a
--   <a>Selector</a>.
Combined :: PseudoSelectorSequence -> SelectorCombinator -> Selector -> Selector

-- | A type that contains the possible ways to combine
--   <a>SelectorSequence</a>s.
data SelectorCombinator

-- | The second tag is a descendant of the first one, denoted in css with a
--   space.
Descendant :: SelectorCombinator

-- | The second tag is the (direct) child of the first one, denoted with a
--   <tt>&gt;</tt> in css.
Child :: SelectorCombinator

-- | The second tag is directly preceded by the first one, denoted with a
--   <tt>+</tt> in css.
DirectlyPreceded :: SelectorCombinator

-- | The second tag is preceded by the first one, denoted with a <tt>~</tt>
--   in css.
Preceded :: SelectorCombinator

-- | The root type of a css selector. This is a comma-separated list of
--   selectors.
newtype SelectorGroup
SelectorGroup :: NonEmpty Selector -> SelectorGroup

-- | Unwrap the given <a>NonEmpty</a> list of <a>Selector</a>s from the
--   <a>SelectorGroup</a> object.
[unSelectorGroup] :: SelectorGroup -> NonEmpty Selector

-- | An enum type that contains the possible <i>pseudo elements</i>. A
--   pseudo element is specified by two colon characters (<tt>::</tt>),
--   followed by the name of the pseudo element. The <a>After</a>,
--   <a>Before</a>, <a>FirstLine</a> and <a>FirstLetter</a> can be written
--   with a single colon for backwards compatibility with CSS 1 and CSS 2.
data PseudoElement

-- | The <tt>::after</tt> pseudo-elements can be used to describe generated
--   content after an element’s content.
After :: PseudoElement

-- | The <tt>::before</tt> pseudo-element can be used to describe generated
--   content before an element’s content.
Before :: PseudoElement

-- | The <tt>::first-line</tt> pseudo-element describes the contents of the
--   first formatted line of an element.
FirstLetter :: PseudoElement

-- | The <tt>::first-letter</tt> pseudo-element represents the first letter
--   of an element, if it is not preceded by any other content (such as
--   images or inline tables) on its line.
FirstLine :: PseudoElement

-- | The <tt>::marker</tt> pseudo-element selects the markers of list
--   items.
Marker :: PseudoElement

-- | The <tt>::placeholder</tt> pseudo-element selects form elements with
--   placeholder text, and let you style the placeholder text.
Placeholder :: PseudoElement

-- | The <tt>::selection</tt> pseudo-element matches the portion of an
--   element that is selected by a user.
Selection :: PseudoElement

-- | A <a>SelectorSequence</a> with an optional <a>PseudoElement</a> at the
--   end. Each <i>element</i> of a <a>Selector</a> can have <i>at most</i>
--   one <a>PseudoElement</a>.
data PseudoSelectorSequence

-- | A data constructor where there is no optional <a>PseudoElement</a>
--   involved.
Sequence :: SelectorSequence -> PseudoSelectorSequence

-- | A data constructor for a <a>SelectorSequence</a> with a
--   <a>PseudoElement</a>.
(:.::) :: SelectorSequence -> PseudoElement -> PseudoSelectorSequence

-- | Add a given <a>PseudoElement</a> to the given <a>SelectorSequence</a>
--   to produce a <a>PseudoSelectorSequence</a>. Since a
--   <a>PseudoElement</a> is an instance of <a>IsString</a>, this can thus
--   be used to combine string literals.
(.::) :: SelectorSequence -> PseudoElement -> PseudoSelectorSequence

-- | A data type that contains the possible pseudo classes. In a CSS
--   selector the pseudo classes are specified with a single colon, for
--   example <tt>:active</tt>. These filter on the <i>state</i> of the
--   items. A full list of pseudo classes is available <a>here</a>.
data PseudoClass

-- | The <tt>:active</tt> pseudo class.
Active :: PseudoClass

-- | The <tt>:checked</tt> pseudo class.
Checked :: PseudoClass

-- | The <tt>:default</tt> pseudo class.
Default :: PseudoClass

-- | The <tt>:disabled</tt> pseudo class.
Disabled :: PseudoClass

-- | The <tt>:empty</tt> pseudo class.
Empty :: PseudoClass

-- | The <tt>:enabled</tt> pseudo class.
Enabled :: PseudoClass

-- | The <tt>:focus</tt> pseudo class.
Focus :: PseudoClass

-- | The <tt>:fullscreen</tt> pseudo class.
Fullscreen :: PseudoClass

-- | The <tt>:hover</tt> pseudo class.
Hover :: PseudoClass

-- | The <tt>:indeterminate</tt> pseudo class.
Indeterminate :: PseudoClass

-- | The <tt>:in-range</tt> pseudo class.
InRange :: PseudoClass

-- | The <tt>:invalid</tt> pseudo class.
Invalid :: PseudoClass

-- | The <tt>:lang(…)</tt> pseudo class, the language parameter is at the
--   moment a <a>Text</a> object, but only uppercase, lowercase and hyphens
--   are characters that can be parsed.
Lang :: Language -> PseudoClass

-- | The <tt>:link</tt> pseudo class.
Link :: PseudoClass

-- | The <tt>:nth-child(…)</tt> pseudo class, if the <a>Nth</a> parameter
--   is <a>One</a>, then it is equivalent to <tt>:first-child</tt>.
NthChild :: Nth -> PseudoClass

-- | The <tt>:nth-last-child(…)</tt> pseudo class, if the <a>Nth</a>
--   parameter is <a>One</a>, then it is equivalent to
--   <tt>:last-child</tt>.
NthLastChild :: Nth -> PseudoClass

-- | The <tt>:nth-last-of-type(…)</tt> pseudo class, if the <a>Nth</a>
--   parameter is <a>One</a>, then it is equivalent to
--   <tt>:last-of-type</tt>.
NthLastOfType :: Nth -> PseudoClass

-- | The <tt>:nth-of-type(…)</tt> pseudo class, if the <a>Nth</a> parameter
--   is <a>One</a>, then it is equivalent to <tt>:first-of-type</tt>.
NthOfType :: Nth -> PseudoClass

-- | The <tt>:only-of-type</tt> pseudo class.
OnlyOfType :: PseudoClass

-- | The <tt>:only-child</tt> pseudo class.
OnlyChild :: PseudoClass

-- | The <tt>:optional</tt> pseudo class.
Optional :: PseudoClass

-- | The <tt>:out-of-range</tt> pseudo class.
OutOfRange :: PseudoClass

-- | The <tt>:read-only</tt> pseudo class.
ReadOnly :: PseudoClass

-- | The <tt>:rad-write</tt> pseudo class.
ReadWrite :: PseudoClass

-- | The <tt>:required</tt> pseudo class.
Required :: PseudoClass

-- | The <tt>:root</tt> pseudo class.
Root :: PseudoClass

-- | The <tt>:target</tt> pseudo class.
Target :: PseudoClass

-- | The <tt>:valid</tt> pseudo class.
Valid :: PseudoClass

-- | The <tt>:visited</tt> pseudo class.
Visited :: PseudoClass

-- | Filter a given <a>SelectorSequence</a> with a given
--   <a>PseudoClass</a>.
(.:) :: SelectorSequence -> PseudoClass -> SelectorSequence

-- | A pattern synonym for <tt>:nth-child(1)</tt>. If <tt>NthChild (Nth 0
--   1)</tt> is used, then this will render as <tt>:first-child</tt>.
pattern FirstChild :: PseudoClass

-- | A pattern synonym for <tt>:nth-of-type(1)</tt>. If <tt>NthOfType (Nth
--   0 1)</tt> is used, then this will render as <tt>:first-of-type</tt>.
pattern FirstOfType :: PseudoClass

-- | A pattern synonym for <tt>:nth-last-child(1)</tt>. If <tt>NthLastChild
--   (Nth 0 1)</tt> is used, then this will render as <tt>:last-child</tt>.
pattern LastChild :: PseudoClass

-- | A pattern synonym for <tt>:nth-last-of-type(1)</tt>. If
--   <tt>NthLastOfType (Nth 0 1)</tt> is used, then this will render as
--   <tt>:last-of-type</tt>.
pattern LastOfType :: PseudoClass

-- | We use <a>Text</a> to specify the language in the <tt>:lang(…)</tt>
--   pseudo class.
type Language = Text

-- | A <a>SelectorSequence</a> is a <a>TypeSelector</a> (that can be
--   <a>Universal</a>) followed by zero, one or more <a>SelectorFilter</a>s
--   these filter the selector further, for example with a <a>Hash</a>, a
--   <a>Class</a>, or an <a>Attrib</a>.
data SelectorSequence

-- | Convert a <a>TypeSelector</a> into a <a>SimpleSelector</a>.
SimpleSelector :: TypeSelector -> SelectorSequence

-- | Apply an additional <a>SelectorFilter</a> to the
--   <a>SelectorSequence</a>.
Filter :: SelectorSequence -> SelectorFilter -> SelectorSequence

-- | Convert the <a>SelectorCombinator</a> to the equivalent css selector
--   text. A space for <a>Descendant</a>, a <tt>&gt;</tt> for <a>Child</a>,
--   a <tt>+</tt> for <a>DirectlyPreceded</a>, and a <tt>~</tt> for
--   <a>Preceded</a>
combinatorText :: SelectorCombinator -> Text

-- | Combines two <a>Selector</a>s with the given
--   <a>SelectorCombinator</a>.
combine :: SelectorCombinator -> Selector -> Selector -> Selector

-- | Combines two <a>Selector</a>s with the <a>Child</a> combinator.
(.>) :: Selector -> Selector -> Selector

-- | Combines two <a>Selector</a>s with the <a>DirectlyPreceded</a>
--   combinator.
(.+) :: Selector -> Selector -> Selector

-- | Combines two <a>Selector</a>s with the <a>Preceded</a> combinator.
(.~) :: Selector -> Selector -> Selector

-- | A type that sums up the different ways to filter a type selector: with
--   an id (hash), a class, and an attribute.
data SelectorFilter

-- | A <a>Hash</a> object as filter.
SHash :: Hash -> SelectorFilter

-- | A <a>Class</a> object as filter.
SClass :: Class -> SelectorFilter

-- | An <a>Attrib</a> object as filter.
SAttrib :: Attrib -> SelectorFilter

-- | A <a>PseudoClass</a> object as filter.
SPseudo :: PseudoClass -> SelectorFilter

-- | A <tt>:not(…)</tt> clause that contains a simple selector to negate.
SNot :: Negation -> SelectorFilter

-- | Obtain the list of filters that are applied in the given
--   <a>SelectorSequence</a>.
filters :: SelectorSequence -> [SelectorFilter]

-- | Obtain the list of filters that are applied in the given
--   <a>SelectorSequence</a> in <i>reversed</i> order.
filters' :: SelectorSequence -> [SelectorFilter]

-- | Add a given list of <a>SelectorFilter</a>s to the given
--   <a>SelectorSequence</a>. The filters are applied left-to-right.
addFilters :: SelectorSequence -> [SelectorFilter] -> SelectorSequence

-- | An infix variant of the <a>addFilters</a> function.
(.@) :: SelectorSequence -> [SelectorFilter] -> SelectorSequence

-- | The namespace of a css selector tag. The namespace can be <a>NAny</a>
--   (all possible namespaces), or a namespace with a given text (this text
--   can be empty).
data Namespace

-- | A typeselector part that specifies that we accept all namespaces, in
--   css denoted with <tt>*</tt>.
NAny :: Namespace

-- | A typselector part that specifies that we accept a certain namespace
--   name.
Namespace :: Text -> Namespace

-- | The empty namespace. This is <i>not</i> the wildcard namespace
--   (<tt>*</tt>). This is a bidirectional namespace and can thus be used
--   in expressions as well.
pattern NEmpty :: Namespace

-- | The element name of a css selector tag. The element name can be
--   <a>EAny</a> (all possible tag names), or an element name with a given
--   text.
data ElementName

-- | A typeselector part that specifies that we accept all element names,
--   in css denoted with <tt>*</tt>.
EAny :: ElementName

-- | A typeselector part that specifies that we accept a certain element
--   name.
ElementName :: Text -> ElementName

-- | A typeselector is a combination of a selector for a namespace, and a
--   selector for an element name. One, or both can be a wildcard.
data TypeSelector
TypeSelector :: Namespace -> ElementName -> TypeSelector

-- | The selector for the namespace.
[selectorNamespace] :: TypeSelector -> Namespace

-- | The selector for the element name.
[elementName] :: TypeSelector -> ElementName

-- | The universal type selector: a selector that matches all types in all
--   namespaces (including the empty namespace). This pattern is
--   bidirectional and thus can be used in expressions as well.
pattern Universal :: TypeSelector

-- | Construct a <a>TypeSelector</a> with a given <a>Namespace</a> and
--   <a>ElementName</a>.
(.|) :: Namespace -> ElementName -> TypeSelector

-- | A css attribute can come in two flavors: either a constraint that the
--   attribute should exists, or a constraint that a certain attribute
--   should have a certain value (prefix, suffix, etc.).
data Attrib

-- | A constraint that the given <a>AttributeName</a> should exist.
Exist :: AttributeName -> Attrib

-- | A constraint about the value associated with the given
--   <a>AttributeName</a>.
Attrib :: AttributeName -> AttributeCombinator -> AttributeValue -> Attrib

-- | The possible ways to match an attribute with a given value in a css
--   selector.
data AttributeCombinator

-- | The attribute has exactly the value of the value, denoted with
--   <tt>=</tt> in css.
Exact :: AttributeCombinator

-- | The attribute has a whitespace separated list of items, one of these
--   items is the value, denoted with <tt>~=</tt> in css.
Include :: AttributeCombinator

-- | The attribute has a hyphen separated list of items, the first item is
--   the value, denoted with <tt>|=</tt> in css.
DashMatch :: AttributeCombinator

-- | The value is a prefix of the value in the attribute, denoted with
--   <tt>^=</tt> in css.
PrefixMatch :: AttributeCombinator

-- | The value is a suffix of the value in the attribute, denoted with
--   <tt>$=</tt> in css.
SuffixMatch :: AttributeCombinator

-- | The value is a substring of the value in the attribute, denoted with
--   <tt>*=</tt> in css.
SubstringMatch :: AttributeCombinator

-- | An attribute name is a name that optionally has a namespace, and the
--   name of the attribute.
data AttributeName
AttributeName :: Namespace -> Text -> AttributeName

-- | The namespace to which the attribute name belongs. This can be
--   <a>NAny</a> as well.
[attributeNamespace] :: AttributeName -> Namespace

-- | The name of the attribute over which we make a claim.
[attributeName] :: AttributeName -> Text

-- | We use <a>Text</a> as the type to store an attribute value.
type AttributeValue = Text

-- | Create an <a>Attrib</a> where the given <a>AttributeName</a> is
--   constrainted to be exactly the given value.
(.=) :: AttributeName -> AttributeValue -> Attrib

-- | Create an <a>Attrib</a> where the given <a>AttributeName</a> is
--   constrainted such that the attribute is a whitespace seperated list of
--   items, and the value is one of these items.
(.~=) :: AttributeName -> AttributeValue -> Attrib

-- | Create an <a>Attrib</a> where the given <a>AttributeName</a> is
--   constrainted such that the attribute is a dash seperated list of
--   items, and the value is the first of these items.
(.|=) :: AttributeName -> AttributeValue -> Attrib

-- | Create an <a>Attrib</a> where the given <a>AttributeName</a> is
--   constrainted such that the attribute has as prefix the given
--   <a>AttributeValue</a>.
(.^=) :: AttributeName -> AttributeValue -> Attrib

-- | Create an <a>Attrib</a> where the given <a>AttributeName</a> is
--   constrainted such that the attribute has as suffix the given
--   <a>AttributeValue</a>.
(.$=) :: AttributeName -> AttributeValue -> Attrib

-- | Create an <a>Attrib</a> where the given <a>AttributeName</a> is
--   constrainted such that the attribute has as substring the given
--   <a>AttributeValue</a>.
(.*=) :: AttributeName -> AttributeValue -> Attrib

-- | A flipped version of the <a>Attrib</a> data constructor, where one
--   first specifies the conbinator, then the <a>AttributeName</a> and
--   finally the value.
attrib :: AttributeCombinator -> AttributeName -> AttributeValue -> Attrib

-- | Convert the given <a>AttributeCombinator</a> to its css selector
--   counterpart.
attributeCombinatorText :: AttributeCombinator -> AttributeValue

-- | A css class, this is wrapped in a data type. The type only wraps the
--   class name, not the dot prefix.
newtype Class
Class :: Text -> Class

-- | Obtain the name from the class.
[unClass] :: Class -> Text

-- | Filter a given <a>SelectorSequence</a> with a given <a>Class</a>.
(...) :: SelectorSequence -> Class -> SelectorSequence

-- | A css hash (used to match an element with a given id). The type only
--   wraps the hash name, not the hash (<tt>#</tt>) prefix.
newtype Hash
Hash :: Text -> Hash

-- | Obtain the name from the hash.
[unHash] :: Hash -> Text

-- | Filter a given <a>SelectorSequence</a> with a given <a>Hash</a>.
(.#) :: SelectorSequence -> Hash -> SelectorSequence

-- | A data type that contains all possible items that can be used in a
--   <tt>:not(…)</tt> clause. Since a <tt>:not(…)</tt> cannot be nested in
--   another <tt>:not(…)</tt>, we see an <a>SNot</a> as a special case, and
--   not as a <a>PseudoClass</a>.
data Negation

-- | A <a>TypeSelector</a> for the <tt>:not(…)</tt> clause.
NTypeSelector :: TypeSelector -> Negation

-- | A <a>Hash</a> for the <tt>:not(…)</tt> clause.
NHash :: Hash -> Negation

-- | A <a>Class</a> for the <tt>:not(…)</tt> clause.
NClass :: Class -> Negation

-- | An <a>Attrib</a> for the <tt>:not(…)</tt> clause.
NAttrib :: Attrib -> Negation

-- | A <a>PseudoClass</a> for the <tt>:not(…)</tt> clause.
NPseudo :: PseudoClass -> Negation

-- | A <a>PseudoElement</a> for the <tt>:not(…)</tt> clause.
NPseudoElement :: PseudoElement -> Negation

-- | A data type that is used to select children and elements of type with
--   the <tt>:nth-child</tt>, <tt>:nth-last-child</tt>,
--   <tt>:nth-last-of-type</tt> and <tt>:nth-of-type</tt>. if the
--   <a>One</a> is used as argument, then the pseudo classes are
--   <tt>:first-child</tt>, <tt>:first-of-type</tt>, <tt>:last-child</tt>,
--   and <tt>:last-of-type</tt>.
data Nth
Nth :: Int -> Int -> Nth

-- | The linear part of the <a>Nth</a> object: the integral number before
--   the <tt>n</tt>.
[linear] :: Nth -> Int

-- | The constant part of the <a>Nth</a> object.
[constant] :: Nth -> Int

-- | A pattern synonym that is used in CSS to specify a sequence that
--   starts with two and each time increases with two.
pattern Even :: Nth

-- | A pattern synonym that is used in CSS to specify a sequence that
--   starts with one and each time increases with two.
pattern Odd :: Nth

-- | An <a>Nth</a> item that spans a collection with only <tt>1</tt> as
--   value. This is used to transform <tt>:nth-child</tt> to
--   <tt>:first-child</tt> for example.
pattern One :: Nth

-- | Obtain the one-based indices that match the given <a>Nth</a> object.
--   The CSS3 selectors are one-based: the first child has index 1.
nthValues :: Nth -> [Int]

-- | Check if the given <a>Nth</a> object contains <i>no</i> items.
nthIsEmpty :: Nth -> Bool

-- | Obtain the zero-based indices that match the given <a>Nth</a> object.
--   One can use this for list/vector processing since the CSS3 selectors
--   start with index 1. The <a>nthValues1</a> can be used for one-based
--   indexes.
nthValues0 :: Nth -> [Int]

-- | Obtain the one-based indices that match the given <a>Nth</a> object.
--   The CSS3 selectors are one-based: the first child has index 1. This is
--   an alias of the <a>nthValues</a> function.
nthValues1 :: Nth -> [Int]

-- | Normalize the given <a>Nth</a> object to a normalized one. If and only
--   if the normalized variants are the same of two <a>Nth</a> objects,
--   then these will produce the same list of values. Normalization is
--   idempotent: calling <a>normalizeNth</a> on a normalized <a>Nth</a>
--   will produce the same <a>Nth</a>.
normalizeNth :: Nth -> Nth

-- | Check if the given <a>Nth</a> object contains a given value.
nthContainsValue :: Nth -> Int -> Bool

-- | A datastructure that specifies the selectivity of a css selector. The
--   specificity is calculated based on three integers: <tt>a</tt>,
--   <tt>b</tt> and <tt>c</tt>.
--   
--   The specificity is calculated with <tt>100*a+10*b+c</tt> where
--   <tt>a</tt>, <tt>b</tt> and <tt>c</tt> count certain elements of the
--   css selector.
data SelectorSpecificity

-- | Create a <a>SelectorSpecificity</a> object with a given value for
--   <tt>a</tt>, <tt>b</tt>, and <tt>c</tt>.
SelectorSpecificity :: Int -> Int -> Int -> SelectorSpecificity

-- | Calculate the specificity of a <a>ToCssSelector</a> type object. This
--   is done by calculating the <a>SelectorSpecificity</a> object, and then
--   calculating the value of that object.
specificity :: ToCssSelector a => a -> Int

-- | Calculate the specificity value of the <a>SelectorSpecificity</a>
specificityValue :: SelectorSpecificity -> Int

-- | Encode a value using binary serialisation to a lazy ByteString.
encode :: Binary a => a -> ByteString

-- | Decode a value from a lazy ByteString, reconstructing the original
--   structure.
decode :: Binary a => ByteString -> a

-- | Convert the given item to a compressed <a>ByteString</a>. This can be
--   used to write to and read from a file for example. The econding format
--   is not an official format: it is constructed based on the structure of
--   the Haskell types. That stream is then passed through a gzip
--   implementation.
compressEncode :: (Binary a, ToCssSelector a) => a -> ByteString

-- | Convert the given item to a compressed <a>ByteString</a>. This can be
--   used to write to and read from a file for example. The econding format
--   is not an official format: it is constructed based on the structure of
--   the Haskell types. That stream is then passed through a gzip
--   implementation.
compressEncodeWith :: (Binary a, ToCssSelector a) => CompressParams -> a -> ByteString

-- | Convert the given item to a compressed <a>ByteString</a>. This can be
--   used to write to and read from a file for example. The econding format
--   is not an official format: it is constructed based on the structure of
--   the Haskell types. That stream is then passed through a gzip
--   implementation.
decompressDecode :: (Binary a, ToCssSelector a) => ByteString -> a
instance GHC.Show.Show Css3.Selector.Core.SelectorSpecificity
instance GHC.Generics.Generic Css3.Selector.Core.SelectorSpecificity
instance Data.Data.Data Css3.Selector.Core.SelectorSpecificity
instance GHC.Show.Show Css3.Selector.Core.Nth
instance GHC.Read.Read Css3.Selector.Core.Nth
instance GHC.Classes.Ord Css3.Selector.Core.Nth
instance GHC.Generics.Generic Css3.Selector.Core.Nth
instance GHC.Classes.Eq Css3.Selector.Core.Nth
instance Data.Data.Data Css3.Selector.Core.Nth
instance GHC.Show.Show Css3.Selector.Core.SelectorCombinator
instance GHC.Read.Read Css3.Selector.Core.SelectorCombinator
instance GHC.Classes.Ord Css3.Selector.Core.SelectorCombinator
instance GHC.Generics.Generic Css3.Selector.Core.SelectorCombinator
instance GHC.Classes.Eq Css3.Selector.Core.SelectorCombinator
instance GHC.Enum.Enum Css3.Selector.Core.SelectorCombinator
instance Data.Data.Data Css3.Selector.Core.SelectorCombinator
instance GHC.Enum.Bounded Css3.Selector.Core.SelectorCombinator
instance GHC.Show.Show Css3.Selector.Core.Namespace
instance GHC.Classes.Ord Css3.Selector.Core.Namespace
instance GHC.Generics.Generic Css3.Selector.Core.Namespace
instance GHC.Classes.Eq Css3.Selector.Core.Namespace
instance Data.Data.Data Css3.Selector.Core.Namespace
instance GHC.Show.Show Css3.Selector.Core.ElementName
instance GHC.Classes.Ord Css3.Selector.Core.ElementName
instance GHC.Generics.Generic Css3.Selector.Core.ElementName
instance GHC.Classes.Eq Css3.Selector.Core.ElementName
instance Data.Data.Data Css3.Selector.Core.ElementName
instance GHC.Show.Show Css3.Selector.Core.TypeSelector
instance GHC.Classes.Ord Css3.Selector.Core.TypeSelector
instance GHC.Generics.Generic Css3.Selector.Core.TypeSelector
instance GHC.Classes.Eq Css3.Selector.Core.TypeSelector
instance Data.Data.Data Css3.Selector.Core.TypeSelector
instance GHC.Show.Show Css3.Selector.Core.AttributeName
instance GHC.Classes.Ord Css3.Selector.Core.AttributeName
instance GHC.Generics.Generic Css3.Selector.Core.AttributeName
instance GHC.Classes.Eq Css3.Selector.Core.AttributeName
instance Data.Data.Data Css3.Selector.Core.AttributeName
instance GHC.Show.Show Css3.Selector.Core.AttributeCombinator
instance GHC.Read.Read Css3.Selector.Core.AttributeCombinator
instance GHC.Classes.Ord Css3.Selector.Core.AttributeCombinator
instance GHC.Generics.Generic Css3.Selector.Core.AttributeCombinator
instance GHC.Classes.Eq Css3.Selector.Core.AttributeCombinator
instance GHC.Enum.Enum Css3.Selector.Core.AttributeCombinator
instance Data.Data.Data Css3.Selector.Core.AttributeCombinator
instance GHC.Enum.Bounded Css3.Selector.Core.AttributeCombinator
instance GHC.Show.Show Css3.Selector.Core.Attrib
instance GHC.Classes.Ord Css3.Selector.Core.Attrib
instance GHC.Generics.Generic Css3.Selector.Core.Attrib
instance GHC.Classes.Eq Css3.Selector.Core.Attrib
instance Data.Data.Data Css3.Selector.Core.Attrib
instance GHC.Show.Show Css3.Selector.Core.PseudoClass
instance GHC.Read.Read Css3.Selector.Core.PseudoClass
instance GHC.Classes.Ord Css3.Selector.Core.PseudoClass
instance GHC.Generics.Generic Css3.Selector.Core.PseudoClass
instance GHC.Classes.Eq Css3.Selector.Core.PseudoClass
instance Data.Data.Data Css3.Selector.Core.PseudoClass
instance GHC.Show.Show Css3.Selector.Core.PseudoElement
instance GHC.Read.Read Css3.Selector.Core.PseudoElement
instance GHC.Classes.Ord Css3.Selector.Core.PseudoElement
instance GHC.Generics.Generic Css3.Selector.Core.PseudoElement
instance GHC.Classes.Eq Css3.Selector.Core.PseudoElement
instance GHC.Enum.Enum Css3.Selector.Core.PseudoElement
instance Data.Data.Data Css3.Selector.Core.PseudoElement
instance GHC.Enum.Bounded Css3.Selector.Core.PseudoElement
instance GHC.Show.Show Css3.Selector.Core.Class
instance GHC.Classes.Ord Css3.Selector.Core.Class
instance GHC.Generics.Generic Css3.Selector.Core.Class
instance GHC.Classes.Eq Css3.Selector.Core.Class
instance Data.Data.Data Css3.Selector.Core.Class
instance GHC.Show.Show Css3.Selector.Core.Hash
instance GHC.Classes.Ord Css3.Selector.Core.Hash
instance GHC.Generics.Generic Css3.Selector.Core.Hash
instance GHC.Classes.Eq Css3.Selector.Core.Hash
instance Data.Data.Data Css3.Selector.Core.Hash
instance GHC.Show.Show Css3.Selector.Core.Negation
instance GHC.Classes.Ord Css3.Selector.Core.Negation
instance GHC.Generics.Generic Css3.Selector.Core.Negation
instance GHC.Classes.Eq Css3.Selector.Core.Negation
instance Data.Data.Data Css3.Selector.Core.Negation
instance GHC.Show.Show Css3.Selector.Core.SelectorFilter
instance GHC.Classes.Ord Css3.Selector.Core.SelectorFilter
instance GHC.Generics.Generic Css3.Selector.Core.SelectorFilter
instance GHC.Classes.Eq Css3.Selector.Core.SelectorFilter
instance Data.Data.Data Css3.Selector.Core.SelectorFilter
instance GHC.Show.Show Css3.Selector.Core.SelectorSequence
instance GHC.Classes.Ord Css3.Selector.Core.SelectorSequence
instance GHC.Generics.Generic Css3.Selector.Core.SelectorSequence
instance GHC.Classes.Eq Css3.Selector.Core.SelectorSequence
instance Data.Data.Data Css3.Selector.Core.SelectorSequence
instance GHC.Show.Show Css3.Selector.Core.PseudoSelectorSequence
instance GHC.Classes.Ord Css3.Selector.Core.PseudoSelectorSequence
instance GHC.Generics.Generic Css3.Selector.Core.PseudoSelectorSequence
instance GHC.Classes.Eq Css3.Selector.Core.PseudoSelectorSequence
instance Data.Data.Data Css3.Selector.Core.PseudoSelectorSequence
instance GHC.Show.Show Css3.Selector.Core.Selector
instance GHC.Classes.Ord Css3.Selector.Core.Selector
instance GHC.Generics.Generic Css3.Selector.Core.Selector
instance GHC.Classes.Eq Css3.Selector.Core.Selector
instance Data.Data.Data Css3.Selector.Core.Selector
instance GHC.Show.Show Css3.Selector.Core.SelectorGroup
instance GHC.Classes.Ord Css3.Selector.Core.SelectorGroup
instance GHC.Generics.Generic Css3.Selector.Core.SelectorGroup
instance GHC.Classes.Eq Css3.Selector.Core.SelectorGroup
instance Data.Data.Data Css3.Selector.Core.SelectorGroup
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.SelectorGroup
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.Class
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.Attrib
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.AttributeName
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.Hash
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.Namespace
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.SelectorSequence
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.TypeSelector
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.ElementName
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.SelectorFilter
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.Selector
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.PseudoSelectorSequence
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.PseudoClass
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.Negation
instance Css3.Selector.Core.ToCssSelector Css3.Selector.Core.PseudoElement
instance Data.Hashable.Class.Hashable Css3.Selector.Core.SelectorGroup
instance Control.DeepSeq.NFData Css3.Selector.Core.SelectorGroup
instance GHC.Base.Semigroup Css3.Selector.Core.SelectorGroup
instance GHC.IsList.IsList Css3.Selector.Core.SelectorGroup
instance Data.Default.Class.Default Css3.Selector.Core.SelectorGroup
instance Data.Binary.Class.Binary Css3.Selector.Core.SelectorGroup
instance Language.Haskell.TH.Syntax.Lift Css3.Selector.Core.SelectorGroup
instance Text.Blaze.ToMarkup Css3.Selector.Core.SelectorGroup
instance Text.Julius.ToJavascript Css3.Selector.Core.SelectorGroup
instance Data.Aeson.Types.ToJSON.ToJSON Css3.Selector.Core.SelectorGroup
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.SelectorGroup
instance Data.Hashable.Class.Hashable Css3.Selector.Core.Selector
instance Control.DeepSeq.NFData Css3.Selector.Core.Selector
instance GHC.Base.Semigroup Css3.Selector.Core.Selector
instance Data.Default.Class.Default Css3.Selector.Core.Selector
instance Data.Binary.Class.Binary Css3.Selector.Core.Selector
instance Language.Haskell.TH.Syntax.Lift Css3.Selector.Core.Selector
instance Text.Blaze.ToMarkup Css3.Selector.Core.Selector
instance Text.Julius.ToJavascript Css3.Selector.Core.Selector
instance Data.Aeson.Types.ToJSON.ToJSON Css3.Selector.Core.Selector
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.Selector
instance Data.Hashable.Class.Hashable Css3.Selector.Core.PseudoSelectorSequence
instance Control.DeepSeq.NFData Css3.Selector.Core.PseudoSelectorSequence
instance Data.Default.Class.Default Css3.Selector.Core.PseudoSelectorSequence
instance Data.Binary.Class.Binary Css3.Selector.Core.PseudoSelectorSequence
instance Language.Haskell.TH.Syntax.Lift Css3.Selector.Core.PseudoSelectorSequence
instance Text.Blaze.ToMarkup Css3.Selector.Core.PseudoSelectorSequence
instance Text.Julius.ToJavascript Css3.Selector.Core.PseudoSelectorSequence
instance Data.Aeson.Types.ToJSON.ToJSON Css3.Selector.Core.PseudoSelectorSequence
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.PseudoSelectorSequence
instance Data.Hashable.Class.Hashable Css3.Selector.Core.SelectorSequence
instance Control.DeepSeq.NFData Css3.Selector.Core.SelectorSequence
instance Data.Default.Class.Default Css3.Selector.Core.SelectorSequence
instance Data.Binary.Class.Binary Css3.Selector.Core.SelectorSequence
instance Language.Haskell.TH.Syntax.Lift Css3.Selector.Core.SelectorSequence
instance Text.Blaze.ToMarkup Css3.Selector.Core.SelectorSequence
instance Text.Julius.ToJavascript Css3.Selector.Core.SelectorSequence
instance Data.Aeson.Types.ToJSON.ToJSON Css3.Selector.Core.SelectorSequence
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.SelectorSequence
instance Data.Hashable.Class.Hashable Css3.Selector.Core.SelectorFilter
instance Control.DeepSeq.NFData Css3.Selector.Core.SelectorFilter
instance Data.Binary.Class.Binary Css3.Selector.Core.SelectorFilter
instance Language.Haskell.TH.Syntax.Lift Css3.Selector.Core.SelectorFilter
instance Text.Blaze.ToMarkup Css3.Selector.Core.SelectorFilter
instance Text.Julius.ToJavascript Css3.Selector.Core.SelectorFilter
instance Data.Aeson.Types.ToJSON.ToJSON Css3.Selector.Core.SelectorFilter
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.SelectorFilter
instance Data.Hashable.Class.Hashable Css3.Selector.Core.Negation
instance Control.DeepSeq.NFData Css3.Selector.Core.Negation
instance Data.Binary.Class.Binary Css3.Selector.Core.Negation
instance Language.Haskell.TH.Syntax.Lift Css3.Selector.Core.Negation
instance Text.Blaze.ToMarkup Css3.Selector.Core.Negation
instance Text.Julius.ToJavascript Css3.Selector.Core.Negation
instance Data.Aeson.Types.ToJSON.ToJSON Css3.Selector.Core.Negation
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.Negation
instance Data.Hashable.Class.Hashable Css3.Selector.Core.Hash
instance Control.DeepSeq.NFData Css3.Selector.Core.Hash
instance Data.String.IsString Css3.Selector.Core.Hash
instance Data.Binary.Class.Binary Css3.Selector.Core.Hash
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.Hash
instance Data.Hashable.Class.Hashable Css3.Selector.Core.Class
instance Control.DeepSeq.NFData Css3.Selector.Core.Class
instance Data.String.IsString Css3.Selector.Core.Class
instance Data.Binary.Class.Binary Css3.Selector.Core.Class
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.Class
instance Data.Hashable.Class.Hashable Css3.Selector.Core.PseudoElement
instance Control.DeepSeq.NFData Css3.Selector.Core.PseudoElement
instance Data.String.IsString Css3.Selector.Core.PseudoElement
instance Data.Binary.Class.Binary Css3.Selector.Core.PseudoElement
instance Language.Haskell.TH.Syntax.Lift Css3.Selector.Core.PseudoElement
instance Text.Blaze.ToMarkup Css3.Selector.Core.PseudoElement
instance Text.Julius.ToJavascript Css3.Selector.Core.PseudoElement
instance Data.Aeson.Types.ToJSON.ToJSON Css3.Selector.Core.PseudoElement
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.PseudoElement
instance Data.Hashable.Class.Hashable Css3.Selector.Core.PseudoClass
instance Control.DeepSeq.NFData Css3.Selector.Core.PseudoClass
instance Data.String.IsString Css3.Selector.Core.PseudoClass
instance Data.String.IsString (Css3.Selector.Core.Nth -> Css3.Selector.Core.PseudoClass)
instance Data.Binary.Class.Binary Css3.Selector.Core.PseudoClass
instance Language.Haskell.TH.Syntax.Lift Css3.Selector.Core.PseudoClass
instance Text.Blaze.ToMarkup Css3.Selector.Core.PseudoClass
instance Text.Julius.ToJavascript Css3.Selector.Core.PseudoClass
instance Data.Aeson.Types.ToJSON.ToJSON Css3.Selector.Core.PseudoClass
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.PseudoClass
instance Data.Hashable.Class.Hashable Css3.Selector.Core.Attrib
instance Control.DeepSeq.NFData Css3.Selector.Core.Attrib
instance Data.String.IsString Css3.Selector.Core.Attrib
instance Data.Binary.Class.Binary Css3.Selector.Core.Attrib
instance Language.Haskell.TH.Syntax.Lift Css3.Selector.Core.Attrib
instance Text.Blaze.ToMarkup Css3.Selector.Core.Attrib
instance Text.Julius.ToJavascript Css3.Selector.Core.Attrib
instance Data.Aeson.Types.ToJSON.ToJSON Css3.Selector.Core.Attrib
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.Attrib
instance Data.Hashable.Class.Hashable Css3.Selector.Core.AttributeCombinator
instance Control.DeepSeq.NFData Css3.Selector.Core.AttributeCombinator
instance Data.Default.Class.Default Css3.Selector.Core.AttributeCombinator
instance Data.Binary.Class.Binary Css3.Selector.Core.AttributeCombinator
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.AttributeCombinator
instance Data.Hashable.Class.Hashable Css3.Selector.Core.AttributeName
instance Control.DeepSeq.NFData Css3.Selector.Core.AttributeName
instance Data.String.IsString Css3.Selector.Core.AttributeName
instance Data.Binary.Class.Binary Css3.Selector.Core.AttributeName
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.AttributeName
instance Data.Hashable.Class.Hashable Css3.Selector.Core.TypeSelector
instance Control.DeepSeq.NFData Css3.Selector.Core.TypeSelector
instance Data.Default.Class.Default Css3.Selector.Core.TypeSelector
instance Data.Binary.Class.Binary Css3.Selector.Core.TypeSelector
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.TypeSelector
instance Data.Hashable.Class.Hashable Css3.Selector.Core.ElementName
instance Control.DeepSeq.NFData Css3.Selector.Core.ElementName
instance GHC.Base.Semigroup Css3.Selector.Core.ElementName
instance GHC.Base.Monoid Css3.Selector.Core.ElementName
instance Data.String.IsString Css3.Selector.Core.ElementName
instance Data.Default.Class.Default Css3.Selector.Core.ElementName
instance Data.Binary.Class.Binary Css3.Selector.Core.ElementName
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.ElementName
instance Data.Hashable.Class.Hashable Css3.Selector.Core.Namespace
instance Control.DeepSeq.NFData Css3.Selector.Core.Namespace
instance GHC.Base.Semigroup Css3.Selector.Core.Namespace
instance GHC.Base.Monoid Css3.Selector.Core.Namespace
instance Data.String.IsString Css3.Selector.Core.Namespace
instance Data.Default.Class.Default Css3.Selector.Core.Namespace
instance Data.Binary.Class.Binary Css3.Selector.Core.Namespace
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.Namespace
instance Data.Hashable.Class.Hashable Css3.Selector.Core.SelectorCombinator
instance Control.DeepSeq.NFData Css3.Selector.Core.SelectorCombinator
instance Data.Default.Class.Default Css3.Selector.Core.SelectorCombinator
instance Data.Binary.Class.Binary Css3.Selector.Core.SelectorCombinator
instance Language.Haskell.TH.Syntax.Lift Css3.Selector.Core.SelectorCombinator
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.SelectorCombinator
instance Data.Hashable.Class.Hashable Css3.Selector.Core.Nth
instance Control.DeepSeq.NFData Css3.Selector.Core.Nth
instance Data.Default.Class.Default Css3.Selector.Core.Nth
instance Data.Binary.Class.Binary Css3.Selector.Core.Nth
instance Language.Haskell.TH.Syntax.Lift Css3.Selector.Core.Nth
instance Test.QuickCheck.Arbitrary.Arbitrary Css3.Selector.Core.Nth
instance Data.Hashable.Class.Hashable Css3.Selector.Core.SelectorSpecificity
instance Control.DeepSeq.NFData Css3.Selector.Core.SelectorSpecificity
instance GHC.Base.Semigroup Css3.Selector.Core.SelectorSpecificity
instance GHC.Base.Monoid Css3.Selector.Core.SelectorSpecificity
instance GHC.Classes.Eq Css3.Selector.Core.SelectorSpecificity
instance GHC.Classes.Ord Css3.Selector.Core.SelectorSpecificity
instance Data.Default.Class.Default Css3.Selector.Core.SelectorSpecificity
instance Data.Binary.Class.Binary Css3.Selector.Core.SelectorSpecificity


-- | A module that defines a quasiquoter to parse a string to a css
--   selector.
module Css3.Selector.QuasiQuoters

-- | A quasiquoter that can be used to construct a <a>SelectorGroup</a> for
--   the given css selector. In case the css selector is invalid. A
--   compiler error will be thrown (at compile time).
csssel :: QuasiQuoter

-- | A quasiquoter that takes the content from the file, and then runs the
--   content of that file as a <a>csssel</a> quasiquote.
cssselFile :: QuasiQuoter

-- | Parse the string to a <a>SelectorGroup</a>.
parseCss :: String -> SelectorGroup


-- | A module for backwards compatibility that re-exports
--   <a>QuasiQuoters</a>. This module is deprecated and eventually will be
--   removed.

-- | <i>Deprecated: Use Css3.Selector.QuasiQuoters instead</i>
module Css.Selector.QuasiQuoters


-- | A module for backwards compatibility that re-exports <a>Core</a>. This
--   module is deprecated and eventually will be removed.

-- | <i>Deprecated: Use Css3.Selector.Core instead</i>
module Css.Selector.Core


-- | A module to define css selectors by making use of a quasiquoter, and
--   manipulating these css selectors.
module Css3.Selector


-- | A module for backwards compatibility that re-exports <a>Selector</a>.
--   This module is deprecated and eventually will be removed.

-- | <i>Deprecated: Use Css3.Selector instead</i>
module Css.Selector


-- | A module for backwards compatibility that re-exports <a>Utils</a>.
--   This module is deprecated and eventually will be removed.

-- | <i>Deprecated: Use Css3.Selector.Utils instead</i>
module Css.Selector.Utils
