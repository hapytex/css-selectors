-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Backwards-compatible orphan instances for base
--   
--   <tt>base-orphans</tt> defines orphan instances that mimic instances
--   available in later versions of <tt>base</tt> to a wider (older) range
--   of compilers. <tt>base-orphans</tt> does not export anything except
--   the orphan instances themselves and complements
--   <tt>&lt;<a>http://hackage.haskell.org/package/base-compat</a>
--   base-compat&gt;</tt>.
--   
--   See the README for what instances are covered:
--   <a>https://github.com/haskell-compat/base-orphans#readme</a>. See also
--   the <a>what is not covered</a> section.
@package base-orphans
@version 0.9.0


-- | Exports orphan instances that mimic instances available in later
--   versions of <tt>base</tt>. To use them, simply <tt>import Data.Orphans
--   ()</tt>.
module Data.Orphans
instance GHC.Base.Functor ((,,,,) a b c d)
instance GHC.Base.Functor ((,,,,,) a b c d e)
instance GHC.Base.Functor ((,,,,,,) a b c d e f)
instance (GHC.Enum.Enum a, GHC.Enum.Bounded a, GHC.Classes.Eq a) => GHC.Enum.Enum (Data.Ord.Down a)
instance forall k (f :: k -> *) (a :: k). (GHC.Generics.Generic1 f, GHC.Classes.Eq (GHC.Generics.Rep1 f a)) => GHC.Classes.Eq (GHC.Generics.Generically1 f a)
instance forall k (f :: k -> *) (a :: k). (GHC.Generics.Generic1 f, GHC.Classes.Ord (GHC.Generics.Rep1 f a)) => GHC.Classes.Ord (GHC.Generics.Generically1 f a)
